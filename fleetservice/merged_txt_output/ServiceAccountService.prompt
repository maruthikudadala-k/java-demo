
You are a professional Java developer and test engineer.

Your task is to generate a **self-contained, safe, and fully compilable JUnit 5 test class** for the module defined below. The project strictly uses **Java 8** and **Mockito 2.x** ‚Äî follow this configuration without exception.

---

## ‚úÖ TEST GENERATION RULES

### 1Ô∏è‚É£ Scope of Testing
- ‚úÖ Only test **public methods and constructors** from the `CURRENT MODULE CODE`.
- ‚ùå Do **not** test private, protected, or package-private methods, fields, or internal logic.

### 2Ô∏è‚É£ Code Boundaries
- ‚úÖ Use only types defined in `CURRENT MODULE CODE` or `PROJECT-LEVEL IMPORTS`.
- ‚ùå Never define or assume the structure of missing models, enums, helpers, or external dependencies.

### 3Ô∏è‚É£ Input Handling
- ‚úÖ Treat all inputs as valid and well-formed.
- ‚úÖ Use safe defaults (e.g., `""`, `Collections.emptyList()`).
- ‚ùå Avoid `null` unless explicitly required.
- ‚ùå Do not test invalid or edge-case inputs unless the logic handles them.

### 4Ô∏è‚É£ Mockito 2.x Stubbing
- ‚úÖ Stub every used interaction explicitly.
- ‚úÖ Match method signatures exactly.
- ‚úÖ Avoid `null` return values unless handled.
- ‚ùå Do not rely on Mockito‚Äôs default returns or partial mocks.

### 5Ô∏è‚É£ Syntax & Structure
- ‚úÖ Use **JUnit 5** (`org.junit.jupiter.api.*`) and **Mockito 2.x** only.
- ‚úÖ Annotate with `@ExtendWith(MockitoExtension.class)`.
- ‚úÖ Use `@Mock` and `@InjectMocks` for dependency wiring.
- ‚úÖ Write clear, focused method names like `shouldReturnXWhenY`.
- ‚ùå Do not use `@BeforeEach` for `MockitoAnnotations.initMocks`.

### 6Ô∏è‚É£ Import Rules
- ‚úÖ Include **every required import** explicitly.
- ‚ùå Never use wildcard (`*`) or unused imports.

### 7Ô∏è‚É£ Behavior Verification
- ‚úÖ Only verify externally observable behavior or mock interactions.
- ‚ùå Never inspect or test private or internal state.

### 8Ô∏è‚É£ Servlet & Security Contexts
If the method under test (or any utility it calls) uses `HttpServletRequest` to extract a `Principal`, authentication details, or headers:

- ‚úÖ Use `MockHttpServletRequest` from `org.springframework.mock.web`.
- ‚úÖ If `request.getUserPrincipal()` is accessed:
  - Mock the exact principal **type actually used** in the module (e.g., `OAuth2Authentication`, `UsernamePasswordAuthenticationToken`, etc.).
  - If the logic chains calls (e.g., `getUserAuthentication().getDetails()`), mock and stub each intermediate object in that chain.
  - Return a minimal `Map<String, Object>` from `getDetails()` with **only required keys** ‚Äî do **not** assume domain-specific field names unless present in the source code.

- ‚úÖ If `request.getHeader(...)` is accessed, use `request.addHeader(key, value)` in the setup.
- ‚úÖ If `request.getAttribute(...)` is accessed, use `request.setAttribute(key, value)`.

- ‚ùå Do not hardcode field names or security class types unless already imported or used in the source.
- ‚ùå Do not partially stub or leave method calls unstubbed ‚Äî mock the full call chain accessed in the method.
- ‚ùå Do not assume any Spring Security context unless it appears explicitly in the current module.

### 9Ô∏è‚É£ Absolute Restrictions

* ‚ùå No reflection, guessing, or reconstruction of undefined types.
* ‚ùå No Java 9+ features.
* ‚ùå No output other than the test class code.

---

## ‚úÖ OUTPUT FORMAT

Output a single **fully compilable** JUnit 5 test class that includes:

* All required import statements
* JUnit 5 + Mockito 2.x compliant annotations
* Focused, deterministic test methods

‚ùå DO NOT output any explanation, comments, or additional content.

---
### üì¶ PROJECT-LEVEL IMPORTS

## // ===== Imported from: com.carbo.fleet.model.ServiceAccount =====
package com.carbo.fleet.model;

import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;
import org.springframework.data.mongodb.core.mapping.Field;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Document(collection = "service-accounts")
public class ServiceAccount {
    @Id
    private String id;

    @Field("userId")
    private String userId;

    @Field("organizationIds")
    private List<String> organizationIds = new ArrayList<>();

    @Field("microservices")
    private List<String> microservices = new ArrayList<>();

    @Field("created")
    private Long created = new Date().getTime();

    @Field("modified")
    private Long modified  = new Date().getTime();

    @Field("ts")
    private Long ts;

    @Field("organizationId")
    private String organizationId;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Long getTs() {
        return ts;
    }

    public void setTs(Long ts) {
        this.ts = ts;
    }

    public String getOrganizationId() {
        return organizationId;
    }

    public void setOrganizationId(String organizationId) {
        this.organizationId = organizationId;
    }

    public List<String> getOrganizationIds() {
        return organizationIds;
    }

    public void setOrganizationIds(List<String> organizationIds) {
        this.organizationIds = organizationIds;
    }

    public List<String> getMicroservices() {
        return microservices;
    }

    public void setMicroservices(List<String> microservices) {
        this.microservices = microservices;
    }

    public Long getCreated() {
        return created;
    }
}

// ===== Imported from: com.carbo.fleet.repository.ServiceAccountMongoDbRepository =====
package com.carbo.fleet.repository;

import com.carbo.fleet.model.ServiceAccount;
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ServiceAccountMongoDbRepository extends MongoRepository<ServiceAccount, String> {
    List<ServiceAccount> findByOrganizationId(String organizationId);
}


---
### üß© CURRENT MODULE CODE

## // ===== Current file: src\main\java\com\carbo\fleet\services\ServiceAccountService.java =====
package com.carbo.fleet.services;

import com.carbo.fleet.model.ServiceAccount;
import com.carbo.fleet.repository.ServiceAccountMongoDbRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class ServiceAccountService {
    private final ServiceAccountMongoDbRepository serviceAccountMongoDbRepository;

    @Autowired
    public ServiceAccountService(ServiceAccountMongoDbRepository serviceAccountMongoDbRepository) {
        this.serviceAccountMongoDbRepository = serviceAccountMongoDbRepository;
    }

    public List<ServiceAccount> getAll() {
        return serviceAccountMongoDbRepository.findAll();
    }

    public List<ServiceAccount> getByOrganizationId(String organizationId) {
        return serviceAccountMongoDbRepository.findByOrganizationId(organizationId);
    }

    public Optional<ServiceAccount> get(String serviceAccountId) {
        return serviceAccountMongoDbRepository.findById(serviceAccountId);
    }

    public ServiceAccount save(ServiceAccount serviceAccount) {
        return serviceAccountMongoDbRepository.save(serviceAccount);
    }

    public void update(ServiceAccount serviceAccount) {
        serviceAccountMongoDbRepository.save(serviceAccount);
    }

    public void delete(String serviceAccountId) {
        serviceAccountMongoDbRepository.deleteById(serviceAccountId);
    }
}



