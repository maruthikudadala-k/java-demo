
You are a professional Java developer and test engineer.

Your task is to generate a **self-contained, safe, and fully compilable JUnit 5 test class** for the module defined below. The project strictly uses **Java 8** and **Mockito 2.x** ‚Äî follow this configuration without exception.

---

## ‚úÖ TEST GENERATION RULES

### 1Ô∏è‚É£ Scope of Testing
- ‚úÖ Only test **public methods and constructors** from the `CURRENT MODULE CODE`.
- ‚ùå Do **not** test private, protected, or package-private methods, fields, or internal logic.

### 2Ô∏è‚É£ Code Boundaries
- ‚úÖ Use only types defined in `CURRENT MODULE CODE` or `PROJECT-LEVEL IMPORTS`.
- ‚ùå Never define or assume the structure of missing models, enums, helpers, or external dependencies.

### 3Ô∏è‚É£ Input Handling
- ‚úÖ Treat all inputs as valid and well-formed.
- ‚úÖ Use safe defaults (e.g., `""`, `Collections.emptyList()`).
- ‚ùå Avoid `null` unless explicitly required.
- ‚ùå Do not test invalid or edge-case inputs unless the logic handles them.

### 4Ô∏è‚É£ Mockito 2.x Stubbing
- ‚úÖ Stub every used interaction explicitly.
- ‚úÖ Match method signatures exactly.
- ‚úÖ Avoid `null` return values unless handled.
- ‚ùå Do not rely on Mockito's default returns or partial mocks.

### 5Ô∏è‚É£ Syntax & Structure
- ‚úÖ Use **JUnit 5** (`org.junit.jupiter.api.*`) and **Mockito 2.x** only.
- ‚úÖ Annotate with `@ExtendWith(MockitoExtension.class)`.
- ‚úÖ Use `@Mock` and `@InjectMocks` for dependency wiring.
- ‚úÖ Write clear, focused method names like `shouldReturnXWhenY`.
- ‚ùå Do not use `@BeforeEach` for `MockitoAnnotations.initMocks`.

### 6Ô∏è‚É£ Import Rules
- ‚úÖ Include **every required import** explicitly.
- ‚ùå Never use wildcard (`*`) or unused imports.

### 7Ô∏è‚É£ Behavior Verification
- ‚úÖ Only verify externally observable behavior or mock interactions.
- ‚ùå Never inspect or test private or internal state.

### 8Ô∏è‚É£ Servlet & Security Contexts
If the method under test (or any utility it calls) uses `HttpServletRequest` to extract a `Principal`, authentication details, or headers:

- ‚úÖ Use `MockHttpServletRequest` from `org.springframework.mock.web`.
- ‚úÖ If `request.getUserPrincipal()` is accessed:
  - Mock the exact principal **type actually used** in the module (e.g., `OAuth2Authentication`, `UsernamePasswordAuthenticationToken`, etc.).
  - If the logic chains calls (e.g., `getUserAuthentication().getDetails()`), mock and stub each intermediate object in that chain.
  - Return a minimal `Map<String, Object>` from `getDetails()` with **only required keys** ‚Äî do **not** assume domain-specific field names unless present in the source code.

- ‚úÖ If `request.getHeader(...)` is accessed, use `request.addHeader(key, value)` in the setup.
- ‚úÖ If `request.getAttribute(...)` is accessed, use `request.setAttribute(key, value)`.

- ‚ùå Do not hardcode field names or security class types unless already imported or used in the source.
- ‚ùå Do not partially stub or leave method calls unstubbed ‚Äî mock the full call chain accessed in the method.
- ‚ùå Do not assume any Spring Security context unless it appears explicitly in the current module.

### 9Ô∏è‚É£ Absolute Restrictions

* ‚ùå No reflection, guessing, or reconstruction of undefined types.
* ‚ùå No Java 9+ features.
* ‚ùå No output other than the test class code.

---

## ‚úÖ OUTPUT FORMAT

Output a single **fully compilable** JUnit 5 test class that includes:

* All required import statements
* JUnit 5 + Mockito 2.x compliant annotations
* Focused, deterministic test methods

‚ùå DO NOT output any explanation, comments, or additional content.

---
### üì¶ PROJECT-LEVEL IMPORTS

## 
---
### üß© CURRENT MODULE CODE

## // ===== Current file: src\main\java\com\carbo\fleet\utils\ControllerUtil.java =====
package com.carbo.fleet.utils;

import org.springframework.security.oauth2.provider.OAuth2Authentication;

import javax.servlet.http.HttpServletRequest;
import java.security.Principal;
import java.util.Map;

public class ControllerUtil {
    public static String getOrganizationId(HttpServletRequest request) {
        Principal principal = request.getUserPrincipal();
        return ((Map) ((OAuth2Authentication) principal).getUserAuthentication().getDetails()).get("organizationId").toString();
    }
    public static String getOrganizationType(HttpServletRequest request) {
        Principal principal = request.getUserPrincipal();
        return ((Map) ((OAuth2Authentication) principal).getUserAuthentication().getDetails()).get("organizationType").toString();
    }
    public static String getUserName(HttpServletRequest request) {
        Principal principal = request.getUserPrincipal();
        return ((Map) ((OAuth2Authentication) principal).getUserAuthentication().getDetails()).get("userName").toString();
    }
}



